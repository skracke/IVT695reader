# File: esphome/ivt695reader.yaml
substitutions:
  device_name: ivt695reader
  device_description: "DIY module to read values from IVT 695 geothermal heat pump"

esphome:
  name: ${device_name}
  comment: "${device_description}"
  name_add_mac_suffix: false
  project:
    name: iv695.esp-ivt695reader-component
    version: "1.0"
  on_boot:
    - priority: 0
      then:
        - sensor.template.publish:
            id: remaining_time_hot_water
            state: 0
        - lambda: |-
            id(remaining_seconds) = 0;

esp8266:
  board: d1_mini

globals:
  - id: remaining_seconds
    type: int

external_components:
  - source:
      type: local
      path: components
    components:
      - ivt695reader

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  ap:
    ssid: ${device_name}
    ap_timeout: 15s
    password: !secret fallback_password

captive_portal:

logger:
  level: INFO
  baud_rate: 0 # disable logging over uart (would use up a HW uart)

api:
  encryption:
    key: !secret ivt695reader_api_encryption

ota:
  - platform: esphome
    password: !secret ota_password

uart:
  id: uart_bus
  tx_pin: GPIO1 # TX hardware UART
  rx_pin: GPIO3 # RX hardware UART
  baud_rate: 9600
  rx_buffer_size: 512

ivt695reader:
  - id: ivt695reader_esp
    uart_id: uart_bus

sensor:
  - platform: template
    name: "Återstående tid extra varmvatten"
    id: remaining_time_hot_water
    unit_of_measurement: "min"
    update_interval: 60s
    accuracy_decimals: 0

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  # Analog values
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    message_counter:
      name: "Message counter"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt1_supply_temp:
      name: "GT1 supply temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt2_outside_temp:
      name: "GT2 outside temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt31_water_tank_temp:
      name: "GT3:1 water tank temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt32_water_tank_temp:
      name: "GT3:2 water tank temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt33_water_tank_temp:
      name: "GT3:3 water tank temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt5_room_temp:
      name: "GT11 brine out temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt6_compressor_temp:
      name: "GT6 compressor temperature"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt10_brine_temp:
      name: "GT10 brine in temperature"

  # Additional analog values
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt1_llt:
      name: "GT1 LLT"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt1_ll:
      name: "GT1 LL"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt1_setpoint:
      name: "GT1 setpoint"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt1_ul:
      name: "GT1 Upper Limit"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt32_ll:
      name: "GT3:2 Lower Limit"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt32_ult:
      name: "GT3:2 Upper Limit Tillskott"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt32_ul:
      name: "GT3:2 Upper Limit"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt33_ll:
      name: "GT3:3 Lower Limit"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    gt33_setpoint:
      name: "GT3:3 setpoint"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    sv3_setpoint_offset:
      name: "SV3 setpoint offset"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    pos_31:
      name: "Effekt ink vid VV behov"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    pos_32:
      name: "Tillskottstimer varmvattenbehov"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    pos_33:
      name: "Prioritera tappvarmvatten"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    elec_heat_pow:
      name: "Electric heating power"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    pos_35:
      name: "Tillskott RAD"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    pos_36:
      name: "Tillskott Tillägg"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    default_sv2_open:
      name: "Default SV2 open"

binary_sensor:
  # Binära värden
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    press_switch_defrost:
      name: "Pressure switch defrost"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    press_switch_high:
      name: "Pressure switch high side"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    press_switch_low:
      name: "Pressure switch low side"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    vacation_mode:
      name: "Vacation mode"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    compressor_in_op:
      name: "Compressor in operation"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    shunt_valve_opening:
      name: "Shunt valve opening"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    shunt_valve_closing:
      name: "Shunt valve closing"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    circ_pump_heat_carrier:
      name: "Circulation pump heat carrier"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    fan_in_op:
      name: "Fan in operation"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    alarm_active:
      name: "Alarm active"
      
  - platform: ivt695reader
    ivt695reader_id: ivt695reader_esp
    external_p2:
      name: "External P2"


  # Alarm LED
  - platform: gpio
    id: alarm_led
    pin:
      number: D5
      inverted: true
      mode:
        input: true
        pullup: true

  - platform: copy
    source_id: alarm_led
    name: "Alarm LED steady"
    device_class: problem
    id: alarm_led_steady
    filters:
      - delayed_on: 600ms
      - delayed_off: 600ms

  - platform: copy
    source_id: alarm_led
    id: alarm_led_blink
    filters:
      - delayed_on: 50ms
      - delayed_off: 600ms

  - platform: template
    name: "Alarm LED flashing"
    device_class: problem
    filters:
      - delayed_on: 600ms
    lambda: |-
      if (id(alarm_led_steady).state == false && id(alarm_led_blink).state == true) {
        return true;
      } else {
        return false;
      }

  # Shower LED
  - platform: gpio
    id: shower_led
    pin:
      number: D6
      inverted: true
      mode:
        input: true
        pullup: true

  - platform: copy
    source_id: shower_led
    name: "Additional hot water"
    device_class: heat
    id: shower_led_steady
    filters:
      - delayed_on: 600ms
      - delayed_off: 600ms

  - platform: copy
    source_id: shower_led
    id: shower_led_blink
    filters:
      - delayed_on: 50ms
      - delayed_off: 600ms

  - platform: template
    name: "Anti-legionella heating"
    device_class: heat
    filters:
      - delayed_on: 600ms
    lambda: |-
      if (id(shower_led_steady).state == false && id(shower_led_blink).state == true) {
        return true;
      } else {
        return false;
      }

  # Electric water heater LED
  - platform: gpio
    name: "Electric water heater"
    pin:
      number: D7
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on_off: 100ms

output:
  - platform: gpio
    id: rotary_enc_a
    pin:
      number: D1
      inverted: true
      mode:
        output: true
        open_drain: true

  - platform: gpio
    id: rotary_enc_b
    pin:
      number: D2
      inverted: true
      mode:
        output: true
        open_drain: true

  - platform: gpio
    id: right_button
    pin:
      number: D3
      inverted: true
      mode:
        output: true
        open_drain: true

  - platform: gpio
    id: left_button
    pin:
      number: D4
      inverted: true
      mode:
        output: true
        open_drain: true

script:  
  - id: additional_hot_water
    parameters:
      AddIfTrueRemoveIfFalse: bool
      HoursToAddOrRemove: int
    mode: queued
    max_runs: 1
    then:
      - script.execute: left_button_press
      - delay: 1s
      - script.execute: rotate_right
      - delay: 1s
      - script.execute: right_button_press
      - delay: 1s
      - if:
          condition:
            lambda: 'return AddIfTrueRemoveIfFalse;'
          then: # Add hours
            - repeat:
                count: !lambda return HoursToAddOrRemove;
                then:
                  - script.execute: rotate_right
                  - delay: 0.2s
          else: # Remove hours
            - repeat:
                count: !lambda return HoursToAddOrRemove;
                then:
                  - script.execute: rotate_left
                  - delay: 0.2s
      - delay: 1s
      - script.execute: right_button_press
      - if:
          condition:
            lambda: 'return AddIfTrueRemoveIfFalse;'
          then:
            - lambda: |-
                // Include cmath för ceil()
                #include <cmath>
                int current_seconds = id(remaining_seconds);
                int hours_to_add_in_seconds = HoursToAddOrRemove * 3600;
                int max_seconds = 48 * 3600;

                int new_total_seconds;
                if (current_seconds > 0) {
                  new_total_seconds = current_seconds + hours_to_add_in_seconds;
                } else {
                  new_total_seconds = hours_to_add_in_seconds;
                }
                
                int new_seconds = ceil((float)new_total_seconds / 3600.0) * 3600;

                // Make sure the timer does not go past 48 hours
                if (new_seconds > max_seconds) {
                    new_seconds = max_seconds;
                }
                
                id(remaining_seconds) = new_seconds; // Uppdatera den interna sekundräknaren
                id(remaining_time_hot_water).publish_state(new_seconds / 60); // Publicera i hela minuter till HA
          else:
            - lambda: |-
                id(remaining_seconds) = 0;
            - sensor.template.publish:
                id: remaining_time_hot_water
                state: 0
      - delay: 3s
      - script.execute: left_button_press

  - id: turn_off_all
    mode: single
    then:
      - output.turn_off: left_button
      - output.turn_off: right_button
      - output.turn_off: rotary_enc_a
      - output.turn_off: rotary_enc_b

  - id: rotate_right
    mode: single
    then: 
      - output.turn_on: rotary_enc_a
      - delay: 10ms
      - output.turn_on: rotary_enc_b
      - delay: 10ms
      - output.turn_off: rotary_enc_a
      - delay: 10ms
      - output.turn_off: rotary_enc_b

  - id: rotate_left
    mode: single
    then: 
      - output.turn_on: rotary_enc_b
      - delay: 10ms
      - output.turn_on: rotary_enc_a
      - delay: 10ms
      - output.turn_off: rotary_enc_b
      - delay: 10ms
      - output.turn_off: rotary_enc_a

  - id: right_button_press
    mode: single
    then: 
      - output.turn_on: right_button
      - delay: 50ms
      - output.turn_off: right_button

  - id: left_button_press
    mode: single
    then: 
      - output.turn_on: left_button
      - delay: 50ms
      - output.turn_off: left_button

button:
  - platform: template
    id: script_one_hour_additional_hot_water
    name: "En timme extra varmvatten"
    on_press: 
      then:
        - script.execute:
            id: additional_hot_water
            AddIfTrueRemoveIfFalse: true
            HoursToAddOrRemove: 1

  - platform: template
    id: script_turn_off_additional_hot_water
    name: "Stäng av extra varmvatten"
    on_press: 
      then:
        - script.execute:
            id: additional_hot_water
            AddIfTrueRemoveIfFalse: false
            HoursToAddOrRemove: 48

  - platform: template
    id: script_left_button_press
    name: "Vänster knapp"
    on_press: 
      then:
        - script.execute: left_button_press

  - platform: template
    id: script_right_button_press
    name: "Höger knapp"
    on_press: 
      then:
        - script.execute: right_button_press

  - platform: template
    id: script_rotary_enc_twist_left
    name: "Vrid åt vänster"
    on_press: 
      then:
        - script.execute: rotate_left

  - platform: template
    id: script_rotary_enc_twist_right
    name: "Vrid åt höger"
    on_press: 
      then:
        - script.execute: rotate_right

  - platform: template
    id: script_turn_off_all
    name: "Stäng av alla utgångar"
    on_press: 
      then:
        - script.execute: turn_off_all

interval:
  - interval: 1s
    then:
      - lambda: |-
          int current_minutes = id(remaining_time_hot_water).state;
          if (id(remaining_seconds) > 0) {
            id(remaining_seconds)--;
            int new_minutes = id(remaining_seconds) / 60;
            if (id(remaining_seconds) % 60 == 0) {
              id(remaining_time_hot_water).publish_state(new_minutes);
            }
          }
